openapi: 3.0.0
servers:   
- url: https://localhost:3100/api/
  description: Development server
- url: https://localhost:3101/api/
  description: Production server
info:
  description: Example TS-API
  version: "1.0.0"
  title: API typescript
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Auth
    description: System authenticate
  - name: Users
    description: Users data
  - name: Tasks
    description: Tasks data
security:
  - JWT: []  

paths:
 # Auth Route #
  /authenticate:
    post:
      tags:
        - Auth
      summary: Authenticate
      operationId: postAuth
      description: System authentication
      requestBody:
        description: Data auth
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/authRequest'
      responses:
        200:
          description: Authentication Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenJwtResponse'
        400:
          description:  BAD_REQUEST | Invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'  
        401:
          description: UNAUTHORIZED | Password wrong
          content:
            application/json:
              schema:
                $ref: '#/components/responses/401'  
        404:
          description:  NOT_FOUND | Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/404'            
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'  
  
 # Users Routes #
  /users:
    get:
      tags:
        - Users
      summary: Get users
      operationId: findUser
      description: | 
        All users available
      parameters:
        - in: query
          name: name
          description: user name
          required: false
          type: string
        - in: query
          name: email
          description: user email 
          type: integer
          format: int32
        - $ref: '#/components/parameters/limit'        
        - $ref: '#/components/parameters/page'        
      responses:
        200:
          description: search users results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/userResponse'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'                
    post:
      tags:
        - Users
      summary: Save an user
      operationId: postUser
      description: Add a user to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/userPostRequest'
        description: Usuario item to add
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/responses/201'
        400:
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'
        409:
          description: An existing item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/responses/409'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user
      operationId: getUserById
      description: | 
        User
      parameters:
        - in: path
          name: id
          description: id
          required: true
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'
        400:
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
    put:
      tags:
        - Users
      summary: Update user
      operationId: putUser
      description: | 
        User
      parameters:
        - in: path
          name: id
          description: id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/userPutRequest'          
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/responses/200'
        400:
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
    delete:
      tags:
        - Users
      summary: Delete user
      operationId: deleteUser
      description: | 
        User
      parameters:
        - in: path
          name: id
          description: id
          required: true
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/responses/200'
        400:
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'          
 
 # Tasks Routes #
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get tasks
      operationId: findTask
      description: | 
        All tasks available
      parameters:
        - in: query
          name: name
          description: user name
          required: false
          type: string
        - $ref: '#/components/parameters/limit'        
        - $ref: '#/components/parameters/page'     
      responses:
        200:
          description: search users results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/userResponse'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
    post:
      tags:
        - Tasks
      summary: Save a task
      operationId: postTask
      description: Add a task to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/taskRequest'
        description: Task item to add
        required: true
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/responses/201'
        400:
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'  
  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task
      operationId: findTaskById
      description: | 
        Get task
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            ref: '#components/schemas/limit'
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'
        400:
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
    put:
      tags:
        - Tasks
      summary: Update task
      operationId: putTask
      description: | 
        Update data task
      parameters:
        - in: path
          name: id
          description: id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/taskRequest'          
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/responses/200'
        400:
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'
    delete:
      tags:
        - Tasks
      summary: Delete task
      operationId: deleteTask
      description: | 
        User
      parameters:
        - in: path
          name: id
          description: id
          required: true
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/responses/200'
        400:
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/responses/400'
        default:
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/responses/500'         
 
# Components
components:
  # Middleware
  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: authorization

  # Http Status responses #
  responses:
    200:
      description: SUCCESS
      type: "object"
      properties:
        data:
          type: object
          properties:
            code:
              type: integer
              format: "int32"   
            status:
              type: string
            data:
              type: boolean     
    201:
      description: CREATED
      type: "object"
      properties:
        data:
          type: object
          properties:
            code:
              type: integer
              format: "int32"   
            status:
              type: string
            id:
              type: string
              format: binary BSON
              example: 5f80451c369fe256acdf0c0f
    400:
      description: BAD_REQUEST
      type: "object"
      properties:
        data:
          type: object
          properties:
            code:
              type: integer
              format: "int32"   
              example: 400
            status:
              type: string
              example: BAD_REQUEST
            message:
              type: string
              example: The server cannot or will not process the request due to an apparent client error
    401:
      description: UNAUTHORIZED
      type: "object"
      properties:
        data:
          type: object
          properties:
            code:
              type: integer
              format: "int32"   
              example: 401
            status:
              type: string
              example: UNAUTHORIZED
            message:
              type: string
              example: Authentication is required and has failed 
    404:
      description: NOT_FOUND
      type: "object"
      properties:
        data:
          type: object
          properties:
            code:
              type: integer
              format: "int32"   
              example: 401
            status:
              type: string
              example: UNAUTHORIZED
            message:
              type: string
              example: The requested resource could not be found but may be available in the future.
    409:
      description: CONFLICT
      type: "object"
      properties:
        data:
          type: object
          properties:
            code:
              type: integer
              format: "int32"   
              example: 401
            status:
              type: string
              example: CONFLICT
            message:
              type: string
              example: Indicates that the resource requested is no longer available and will not be available again
    500:
      description: INTERNAL_SERVER_ERROR
      type: "object"
      properties:
        data:
          type: object
          properties:
            code:
              type: integer
              format: "int32"   
              example: 500
            status:
              type: string
              example: INTERNAL_SERVER_ERROR
            message:
              type: string
              example: The server either does not recognize the request method

  # Model responses #              
  schemas:
    tokenJwtResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: apiKey
              format: HS256
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkb21haW4iOiJBUElfUkVTVCIsInBheWxvYWQiOnsiaWQiOiI1ZjgwOGY3NjFkNjg2ZDU2ZTQxZjU2MDgifSwiaWF0IjoxNjAyMzM0OTQ2LCJleHAiOjE2MDIzNzgxNDZ9.OLmbo-_fQ47yRceNv7u1qTW9VziGWiPPiLAuyRcS8rM
    userResponse:
      type: object
      properties:
        id:
          type: string
          format: binary BSON
          example: 5f80451c369fe256acdf0c0f
        name:
          type: string
          example: user name
        phone:
          type: string
          example: (xx) 56789-1234
        email:
          type: string
        tasks:
          properties:
          type: array
          items:
            $ref: '#/components/schemas/taskResponse'
    taskResponse:
      type: object
      properties:
        name:
          type: string
          example: TODO something       
        description:
          type: string
          example: Something
        start_date:
          type: string
          format: date-time
          example: '2020-10-06T09:12:33.001Z'               
        end_date:
          type: string
          format: date-time
          example: '2020-10-06T09:12:33.001Z'               
        created_date:
          type: string
          format: date-time
          example: '2020-10-06T09:12:33.001Z'      
        user:
          type: string
          format: binary BSON
          example: 5f80451c369fe256acdf0c0f                   
  
  # Request body #
  requestBodies:    
    authRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: user@mail.com
        password:
          type: string
          example: asdf&*9@#
    userPostRequest:
      type: object
      required:
        - name
        - email
        - password
        - phone
      properties:
        name:
          type: string
          example: Fulano
        phone:
          type: string
          example: Silva
        email:
          type: string
          example: user@gmail.com
        password:
          type: string
          description: Use capital letters, number and special characters
          example: A6@7#8j9k
    userPutRequest:
      type: object
      required:
        - name
        - email
        - phone
      properties:
        name:
          type: string
          example: Fulano
        phone:
          type: string
          example: Silva
    taskRequest:
      type: object
      required:
        - name
        - description
        - start_date
        - user
      properties:
        name:
          type: string
          example: Cofee
        description:
          type: string
          example: Drink cofee
        start_date:
          type: string
          format: date-time
          example: '2020-10-01T12:12:33.001Z'
        end_date:
          type: string
          format: date-time
          example: '2020-10-01T12:12:33.001Z'
        user:
          type: string
          format: binary BSON
          example: 5f80451c369fe256acdf0c0f
 
  # Parameters #
  parameters:
    limit:      # Can be referenced via '#/components/parameters/limit'
      name: limit
      in: query
      description: Maximum number of items to return
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20    
    page:
      name: page
      in: query          
      in: query
      description: Number of page for results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
  